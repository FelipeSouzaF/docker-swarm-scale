version: "3.8"

services:
  web:
    image: stackdemo:latest
    deploy:
      mode: replicated
      replicas: 1
      labels:
        "balancer.enable": "true"
        "balancer.scale.max.count": 5
        "balancer.scale.min.count": 1
        "balancer.scale.threshold.cpu.lower": 10
        "balancer.scale.threshold.cpu.upper": 25
        "balancer.target-stage": 'dev'
      resources:
        limits:
          cpus: "0.5"
          memory: "64m"
    volumes:
      - /vagrant/files/stackdemo:/code
    ports:
      - "8888:8000"
  redis:
    image: redis:alpine

  scale-service:
    image: ghcr.io/bennetgallein/docker-swarm-scaler-backend:main
    init: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PROM_URL=prometheus
      - PROM_PORT=9090
      - TARGET_LABEL=balancer.target-stage=dev
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - target: 8080
        published: 8080
        mode: host
    deploy:
      mode: global

  prometheus:
    image: prom/prometheus:v2.12.0
    command:
      [
        "--storage.tsdb.retention.size=1GB",
        "--config.file=/etc/prometheus/prometheus.yml",
        "--web.console.libraries=/etc/prometheus/console_libraries",
        "--web.console.templates=/etc/prometheus/consoles",
        "--web.enable-lifecycle",
      ]
    ports:
      - target: 9090
        published: 9090
        mode: host
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

configs:
  prometheus_config:
    file: ./prometheus.yml
